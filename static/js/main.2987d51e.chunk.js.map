{"version":3,"sources":["lib/StakeSpecs.js","App.js","serviceWorker.js","index.js"],"names":["StakeSpecs","z0","numPools","sigma","totalStakeInCurrentPool","currentTotalSupply","nonmyopicSigma","s","r","k","Math","max","totalStakeFromPoolLeaders","t","R","inflationRate","pow","totalPoolReward","a0","sP","min","sigmaP","poolLeaderReward","c","m","memberReward","desirability","ADARound","amount","round","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","targetNumPools","usdToADA","costPerEpochInUSD","myopicTotalPoolReward","myopicPoolLeaderReward","myopicMemberReward","myopicDesirability","nonmyopicTotalPoolReward","nonmyopicPoolLeaderReward","nonmyopicMemberReward","nonmyopicDesirability","setState","key","e","_this2","defineProperty","parseFloat","target","value","updateAll","_this3","react_default","a","createElement","className","role","onChange","handleChange","defaultValue","id","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2987d51e.chunk.js","sourcesContent":["function z0(numPools) {\n  return 1 / numPools;\n}\n\nfunction sigma(totalStakeInCurrentPool, currentTotalSupply) {\n  return totalStakeInCurrentPool / currentTotalSupply;\n}\n\nfunction nonmyopicSigma(s, sigma, r, z0, k) {\n  if (r<=k){\n    return Math.max(sigma, z0);\n  } else {\n    return s;\n  }\n}\n\nfunction s(totalStakeFromPoolLeaders, currentTotalSupply) {\n  return totalStakeFromPoolLeaders / currentTotalSupply;\n}\n\nfunction t(totalStakeInCurrentPool, totalStakeFromPoolLeaders, currentTotalSupply) {\n  return (totalStakeInCurrentPool - totalStakeFromPoolLeaders) / currentTotalSupply;\n}\n\nfunction R(currentTotalSupply, inflationRate) {\n  return currentTotalSupply * (Math.pow(1+inflationRate/100, 1/73)) - currentTotalSupply;\n}\n\nfunction totalPoolReward(R, s, sigma, a0, z0) {\n  var sP = Math.min(s, z0);\n  var sigmaP = Math.min(sigma, z0);\n  return R/(1+a0) * (sigmaP + sP*a0*(sigmaP-sP*(z0-sigmaP)/z0)/z0);\n}\n\nfunction poolLeaderReward(totalPoolReward, c, m, s, sigma) {\n  if (totalPoolReward < c){\n    return totalPoolReward;\n  } else {\n    return c + (totalPoolReward - c) * (m + (1 - m) * s / sigma);\n  }\n}\n\nfunction memberReward(totalPoolReward, c, m, t, sigma) {\n  if (totalPoolReward < c) {\n    return 0;\n  } else {\n    return (totalPoolReward - c) * (1 - m) * t / sigma;\n  }\n}\n\nfunction desirability(totalPoolReward, c, m) {\n  if (totalPoolReward <= c) {\n    return 0;\n  } else {\n    return (totalPoolReward - c) * (1 - m);\n  }\n}\n\nexport default {z0, sigma, nonmyopicSigma, s, t, R, totalPoolReward,\n                poolLeaderReward, memberReward, desirability}\n","import React, { Component } from 'react';\nimport './App.css';\nimport StakeSpecs from './lib/StakeSpecs.js'\n\nfunction costInADA(costPerEpochInUSD, usdToADA) {\n  return ADARound(costPerEpochInUSD / usdToADA);\n}\n\nfunction ADARound(amount) {\n  // Round to 6 decimals\n  return Math.round(amount*1000000)/1000000;\n}\n\n\nclass App extends Component {\n  updateAll() {\n    var z0 = StakeSpecs.z0(this.state.targetNumPools);\n    var sigma = StakeSpecs.sigma(this.state.totalStakeInCurrentPool, this.state.currentTotalSupply);\n    var s = StakeSpecs.s(this.state.totalStakeFromPoolLeaders, this.state.currentTotalSupply);\n    var nonmyopicSigma = StakeSpecs.nonmyopicSigma(s, sigma, this.state.r, z0, this.state.targetNumPools);\n    var t = StakeSpecs.t(this.state.totalStakeInCurrentPool, this.state.totalStakeFromPoolLeaders, this.state.currentTotalSupply);\n    var c = costInADA(this.state.costPerEpochInUSD, this.state.usdToADA);\n    var R  = StakeSpecs.R(this.state.currentTotalSupply, this.state.inflationRate);\n    var myopicTotalPoolReward = ADARound(StakeSpecs.totalPoolReward(R,\n                                                          s,\n                                                          sigma,\n                                                          this.state.a0,\n                                                          z0));\n    var myopicPoolLeaderReward = ADARound(StakeSpecs.poolLeaderReward(myopicTotalPoolReward,\n                                                          c,\n                                                          this.state.m/100,\n                                                          s,\n                                                          sigma));\n    var myopicMemberReward = ADARound(StakeSpecs.memberReward(myopicTotalPoolReward,\n                                                  c,\n                                                  this.state.m/100,\n                                                  t,\n                                                  sigma));\n\n    var myopicDesirability = ADARound(StakeSpecs.desirability(myopicTotalPoolReward,\n                                              c,\n                                              this.state.m/100,\n                                              sigma));\n\n    var nonmyopicTotalPoolReward = ADARound(StakeSpecs.totalPoolReward(R,\n                                                        s,\n                                                        nonmyopicSigma,\n                                                        this.state.a0,\n                                                        z0));\n\n    var nonmyopicPoolLeaderReward = ADARound(StakeSpecs.poolLeaderReward(nonmyopicTotalPoolReward,\n                                                         c,\n                                                         this.state.m/100,\n                                                         s,\n                                                         nonmyopicSigma));\n\n    var nonmyopicMemberReward = ADARound(StakeSpecs.memberReward(nonmyopicTotalPoolReward,\n                                                     c,\n                                                     this.state.m/100,\n                                                     t,\n                                                     nonmyopicSigma));\n\n    var nonmyopicDesirability = ADARound(StakeSpecs.desirability(nonmyopicTotalPoolReward,\n                                                 c,\n                                                 this.state.m/100,\n                                                 z0));\n\n    this.setState({\n                    z0: z0,\n                    sigma: sigma,\n                    nonmyopicSigma: nonmyopicSigma,\n                    s: s,\n                    t: t,\n                    c: c,\n                    R: R,\n                    myopicTotalPoolReward: myopicTotalPoolReward,\n                    myopicPoolLeaderReward: myopicPoolLeaderReward,\n                    myopicMemberReward: myopicMemberReward,\n                    myopicDesirability: myopicDesirability,\n                    nonmyopicTotalPoolReward: nonmyopicTotalPoolReward,\n                    nonmyopicPoolLeaderReward: nonmyopicPoolLeaderReward,\n                    nonmyopicMemberReward: nonmyopicMemberReward,\n                    nonmyopicDesirability: nonmyopicDesirability\n                  });\n  }\n\n  constructor(props) {\n    super(props);\n    var currentTotalSupply = 31000000000;\n    var a0 = 0.02; // Pool leader influence factor\n    var targetNumPools = 100;\n    var r = 20; //Rank of the pool\n    var totalStakeInCurrentPool = 100000000;\n    var totalStakeFromPoolLeaders = 1000000;\n    var usdToADA = 0.05;\n    var costPerEpochInUSD = 5;\n    var m = 1 // Pool fee %\n    var inflationRate = 0.05 // Inflation rate in percent\n    this.state = {\n      currentTotalSupply: currentTotalSupply,\n      targetNumPools: targetNumPools,\n      totalStakeInCurrentPool: totalStakeInCurrentPool,\n      totalStakeFromPoolLeaders: totalStakeFromPoolLeaders,\n      a0: a0,\n      r: r,\n      usdToADA: usdToADA,\n      costPerEpochInUSD: costPerEpochInUSD,\n      m: m,\n      inflationRate: inflationRate\n    }\n  }\n\n  handleChange(key, e) {\n    this.setState({[key]: parseFloat(e.target.value)}, ()=>{this.updateAll()})\n  }\n\n  componentDidMount(){\n    this.updateAll();\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <div className=\"row title\">\n          <div className=\"alert alert-primary col-sm-9 offset-sm-2\" role=\"alert\">\n            <h4 className=\"alert-heading\">Cardano Stake Pool Desirability Estimation</h4>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-3 offset-sm-2 card\">\n            <div>Total ADA Supply</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('currentTotalSupply', e)} defaultValue={this.state.currentTotalSupply}/>\n            </div>\n            <div>Inflation rate per epoch</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">%</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('inflationRate', e)} defaultValue={this.state.inflationRate}/>\n            </div>\n            <div>Pool leader influence factor</div>\n            <div className=\"input-group mb-3\">\n              <input className=\"form-control\" onChange={(e) => this.handleChange('a0', e)} defaultValue={this.state.a0}/>\n            </div>\n            <div>Number of desired pools</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">#</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('targetNumPools', e)} defaultValue={this.state.targetNumPools}/>\n            </div>\n            <div>Current rank of the pool</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">#</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('r', e)} defaultValue={this.state.r}/>\n            </div>\n            <div>Total stake in current pool</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('totalStakeInCurrentPool', e)} defaultValue={this.state.totalStakeInCurrentPool}/>\n            </div>\n            <div>Total stake from pool leader</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('totalStakeFromPoolLeaders', e)} defaultValue={this.state.totalStakeFromPoolLeaders}/>\n            </div>\n            <div>Exchange rate</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">USD/ADA</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('usdToADA', e)} defaultValue={this.state.usdToADA}/>\n            </div>\n            <div>Cost per epoch</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">$</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('costPerEpochInUSD', e)} defaultValue={this.state.costPerEpochInUSD}/>\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳ {this.state.c}</span>\n              </div>\n            </div>\n            <div>Pool fee</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">%</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('m', e)} defaultValue={this.state.m}/>\n            </div>\n          </div>\n          <div className=\"col-sm-5 offset-sm-1\">\n            <ul className=\"list-group dependent-variable-panel\">\n              <li className=\"list-group-item list-group-item-action active\">\n                <div>Myopic estimation</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Total pool reward per epoch</div>\n                <div>{this.state.myopicTotalPoolReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Pool leader reward per epoch</div>\n                <div>{this.state.myopicPoolLeaderReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Member reward per epoch</div>\n                <div>{this.state.myopicMemberReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Desirability</div>\n                <div>{this.state.myopicDesirability}</div>\n              </li>\n            </ul>\n            <ul className=\"list-group dependent-variable-panel\">\n              <li className=\"list-group-item list-group-item-action active\">\n                <div>Non-myopic estimation</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Total pool reward per epoch when pool is saturated</div>\n                <div>{this.state.nonmyopicTotalPoolReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Pool leader reward per epoch</div>\n                <div>{this.state.nonmyopicPoolLeaderReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Member reward per epoch</div>\n                <div>{this.state.nonmyopicMemberReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Desirability</div>\n                <div>{this.state.nonmyopicDesirability}</div>\n              </li>\n            </ul>\n            <a id=\"githublink\" href=\"https://github.com/cffls/cardano-stake-pool-desirability\"><span>Github </span><em className=\"fa fa-github\"></em></a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}