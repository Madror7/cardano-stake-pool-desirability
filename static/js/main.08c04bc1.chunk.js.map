{"version":3,"sources":["lib/StakeSpecs.js","App.js","serviceWorker.js","index.js"],"names":["StakeSpecs","z0","numPools","sigma","totalStakeInCurrentPool","currentTotalSupply","Math","min","nonmyopicSigma","max","s","totalStakeFromPoolLeaders","t","R","inflationRate","pow","totalPoolReward","a0","poolLeaderReward","c","m","memberReward","desirability","ADARound","amount","round","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","desiredPools","usdToADA","costPerEpochInUSD","handleChange","bind","assertThisInitialized","myopicTotalPoolReward","myopicPoolLeaderReward","myopicMemberReward","myopicDesirability","nonmyopicTotalPoolReward","nonmyopicPoolLeaderReward","nonmyopicMemberReward","nonmyopicDesirability","setState","key","e","_this2","defineProperty","parseFloat","target","value","updateAll","_this3","react_default","a","createElement","className","role","onChange","defaultValue","id","href","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08c04bc1.chunk.js","sourcesContent":["function z0(numPools) {\n  return 1 / numPools;\n}\n\nfunction sigma(totalStakeInCurrentPool, currentTotalSupply, z0) {\n  return Math.min(totalStakeInCurrentPool / currentTotalSupply, z0);\n}\n\nfunction nonmyopicSigma(totalStakeInCurrentPool, currentTotalSupply, z0) {\n  return Math.max(totalStakeInCurrentPool / currentTotalSupply, z0);\n}\n\nfunction s(totalStakeFromPoolLeaders, currentTotalSupply, z0) {\n  return Math.min(totalStakeFromPoolLeaders / currentTotalSupply, z0);\n}\n\nfunction t(totalStakeFromPoolLeaders, currentTotalSupply, totalStakeInCurrentPool, z0) {\n  if(totalStakeFromPoolLeaders / currentTotalSupply > z0) {\n    return 0;\n  } else {\n    return (totalStakeInCurrentPool - totalStakeFromPoolLeaders) / currentTotalSupply;\n  }\n}\n\nfunction R(currentTotalSupply, inflationRate) {\n  return currentTotalSupply * (Math.pow(1+inflationRate/100, 1/73)) - currentTotalSupply;\n}\n\nfunction totalPoolReward(R, s, sigma, a0, z0) {\n  return R/(1+a0) * (sigma + s*a0*(sigma-s*(z0-sigma)/z0)/z0);\n}\n\nfunction poolLeaderReward(totalPoolReward, c, m, s, sigma) {\n  if (totalPoolReward < c){\n    return totalPoolReward;\n  } else {\n    return c + (totalPoolReward - c) * (m + (1 - m) * s / sigma);\n  }\n}\n\nfunction memberReward(totalPoolReward, c, m, t, sigma) {\n  if (totalPoolReward < c) {\n    return 0;\n  } else {\n    return (totalPoolReward - c) * (1 - m) * t / sigma;\n  }\n}\n\nfunction desirability(totalPoolReward, c, m) {\n  if (totalPoolReward <= c) {\n    return 0;\n  } else {\n    return (totalPoolReward - c) * (1 - m);\n  }\n}\n\nexport default {z0, sigma, nonmyopicSigma, s, t, R, totalPoolReward,\n                poolLeaderReward, memberReward, desirability}\n","import React, { Component } from 'react';\nimport './App.css';\nimport StakeSpecs from './lib/StakeSpecs.js'\n\nfunction costInADA(costPerEpochInUSD, usdToADA) {\n  return ADARound(costPerEpochInUSD / usdToADA);\n}\n\nfunction ADARound(amount) {\n  // Round to 6 decimals\n  return Math.round(amount*1000000)/1000000;\n}\n\n\nclass App extends Component {\n  updateAll() {\n    var z0 = StakeSpecs.z0(this.state.desiredPools);\n    var sigma = StakeSpecs.sigma(this.state.totalStakeInCurrentPool, this.state.currentTotalSupply, z0);\n    var nonmyopicSigma = StakeSpecs.nonmyopicSigma(this.state.totalStakeInCurrentPool, this.state.currentTotalSupply, z0);\n    var s = StakeSpecs.s(this.state.totalStakeFromPoolLeaders, this.state.currentTotalSupply, z0);\n    var t = StakeSpecs.t(this.state.totalStakeFromPoolLeaders, this.state.currentTotalSupply, this.state.totalStakeInCurrentPool, z0);\n    var c = costInADA(this.state.costPerEpochInUSD, this.state.usdToADA);\n    var R  = StakeSpecs.R(this.state.currentTotalSupply, this.state.inflationRate);\n    var myopicTotalPoolReward = ADARound(StakeSpecs.totalPoolReward(R,\n                                                          s,\n                                                          sigma,\n                                                          this.state.a0,\n                                                          z0));\n    var myopicPoolLeaderReward = ADARound(StakeSpecs.poolLeaderReward(myopicTotalPoolReward,\n                                                          c,\n                                                          this.state.m/100,\n                                                          s,\n                                                          sigma));\n    var myopicMemberReward = ADARound(StakeSpecs.memberReward(myopicTotalPoolReward,\n                                                  c,\n                                                  this.state.m/100,\n                                                  t,\n                                                  sigma));\n\n    var myopicDesirability = ADARound(StakeSpecs.desirability(myopicTotalPoolReward,\n                                              c,\n                                              this.state.m/100,\n                                              sigma));\n\n    var nonmyopicTotalPoolReward = ADARound(StakeSpecs.totalPoolReward(R,\n                                                        s,\n                                                        z0,\n                                                        this.state.a0,\n                                                        z0));\n\n    var nonmyopicPoolLeaderReward = ADARound(StakeSpecs.poolLeaderReward(nonmyopicTotalPoolReward,\n                                                         c,\n                                                         this.state.m/100,\n                                                         s,\n                                                         nonmyopicSigma));\n\n    var nonmyopicMemberReward = ADARound(StakeSpecs.memberReward(nonmyopicTotalPoolReward,\n                                                     c,\n                                                     this.state.m/100,\n                                                     t,\n                                                     nonmyopicSigma));\n\n    var nonmyopicDesirability = ADARound(StakeSpecs.desirability(nonmyopicTotalPoolReward,\n                                                 c,\n                                                 this.state.m/100,\n                                                 z0));\n\n    this.setState({\n                    z0: z0,\n                    sigma: sigma,\n                    nonmyopicSigma: nonmyopicSigma,\n                    s: s,\n                    t: t,\n                    c: c,\n                    R: R,\n                    myopicTotalPoolReward: myopicTotalPoolReward,\n                    myopicPoolLeaderReward: myopicPoolLeaderReward,\n                    myopicMemberReward: myopicMemberReward,\n                    myopicDesirability: myopicDesirability,\n                    nonmyopicTotalPoolReward: nonmyopicTotalPoolReward,\n                    nonmyopicPoolLeaderReward: nonmyopicPoolLeaderReward,\n                    nonmyopicMemberReward: nonmyopicMemberReward,\n                    nonmyopicDesirability: nonmyopicDesirability\n                  });\n  }\n\n  constructor(props) {\n    super(props);\n    var currentTotalSupply = 31000000000;\n    var a0 = 0.02; // Pool leader influence factor\n    var desiredPools = 100;\n    var totalStakeInCurrentPool = 5000000;\n    var totalStakeFromPoolLeaders = 1000000;\n    var usdToADA = 0.05;\n    var costPerEpochInUSD = 50;\n    var m = 1 // Pool fee %\n    var inflationRate = 0.05 // Inflation rate in percent\n    this.state = {\n      currentTotalSupply: currentTotalSupply,\n      desiredPools: desiredPools,\n      totalStakeInCurrentPool: totalStakeInCurrentPool,\n      totalStakeFromPoolLeaders: totalStakeFromPoolLeaders,\n      a0: a0,\n      usdToADA: usdToADA,\n      costPerEpochInUSD: costPerEpochInUSD,\n      m: m,\n      inflationRate: inflationRate\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(key, e) {\n    this.setState({[key]: parseFloat(e.target.value)}, ()=>{this.updateAll()})\n  }\n\n  componentDidMount(){\n    this.updateAll();\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <div className=\"row title\">\n          <div className=\"alert alert-primary col-9 offset-md-2\" role=\"alert\">\n            <h4 className=\"alert-heading\">Cardano Stake Pool Desirability Estimation</h4>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-3 offset-md-2 card\">\n            <div>Total ADA Supply</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('currentTotalSupply', e)} defaultValue={this.state.currentTotalSupply}/>\n            </div>\n            <div>Inflation rate per epoch ρ</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">%</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('inflationRate', e)} defaultValue={this.state.inflationRate}/>\n            </div>\n            <div>Number of desired pools</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">#</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('desiredPools', e)} defaultValue={this.state.desiredPools}/>\n            </div>\n            <div>Total stake in current pool</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('totalStakeInCurrentPool', e)} defaultValue={this.state.totalStakeInCurrentPool}/>\n            </div>\n            <div>Total stake from pool leader</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('totalStakeFromPoolLeaders', e)} defaultValue={this.state.totalStakeFromPoolLeaders}/>\n            </div>\n            <div>Exchange rate</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">USD/ADA</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('usdToADA', e)} defaultValue={this.state.usdToADA}/>\n            </div>\n            <div>Cost per epoch</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">$</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('costPerEpochInUSD', e)} defaultValue={this.state.costPerEpochInUSD}/>\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">₳ {this.state.c}</span>\n              </div>\n            </div>\n            <div>Pool fee</div>\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">%</span>\n              </div>\n              <input className=\"form-control\" onChange={(e) => this.handleChange('m', e)} defaultValue={this.state.m}/>\n            </div>\n            <div>Pool leader influence factor</div>\n            <div className=\"input-group mb-3\">\n              <input className=\"form-control\" onChange={(e) => this.handleChange('a0', e)} defaultValue={this.state.a0}/>\n            </div>\n          </div>\n          <div className=\"col-5 offset-md-1\">\n            <ul className=\"list-group dependent-variable-panel\">\n              <li className=\"list-group-item list-group-item-action active\">\n                <div>Myopic estimation</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Total pool reward per epoch</div>\n                <div>{this.state.myopicTotalPoolReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Pool leader reward per epoch</div>\n                <div>{this.state.myopicPoolLeaderReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Member reward per epoch</div>\n                <div>{this.state.myopicMemberReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Desirability</div>\n                <div>{this.state.myopicDesirability}</div>\n              </li>\n            </ul>\n            <ul className=\"list-group dependent-variable-panel\">\n              <li className=\"list-group-item list-group-item-action active\">\n                <div>Non-myopic estimation</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Total pool reward per epoch</div>\n                <div>{this.state.nonmyopicTotalPoolReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Pool leader reward per epoch</div>\n                <div>{this.state.nonmyopicPoolLeaderReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Member reward per epoch</div>\n                <div>{this.state.nonmyopicMemberReward}</div>\n              </li>\n              <li className=\"list-group-item\">\n                <div>Desirability</div>\n                <div>{this.state.nonmyopicDesirability}</div>\n              </li>\n            </ul>\n            <a id=\"githublink\" href=\"https://github.com/cffls/cardano-stake-pool-desirability\"><span>Github </span><em class=\"fa fa-github\"></em></a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}